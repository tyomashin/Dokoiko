name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  DEVELOPER_DIR: /Applications/Xcode_12.4.app

jobs:
  build:

    runs-on: macos-latest

    steps:
    # リポジトリのチェックアウト
    - uses: actions/checkout@v2

    - name: Install the Apple certificate and provisioning profile
      env:
        BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
        P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
        BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
        KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
      run: |
        # 変数を作成する
        CERTIFICATE_PATH=$RUNNER_TEMP/dokoiko_develop.p12
        PP_PATH=$RUNNER_TEMP/dokoiko_develop.mobileprovision
        KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

        # シークレットから証明書とプロビジョニングプロファイルをインポートする
        echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH
        echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode --output $PP_PATH

        # 一時的なキーチェーンを作成する
        security create-keychain -p $KEYCHAIN_PASSWORD $KEYCHAIN_PATH
        security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
        security unlock-keychain -p $KEYCHAIN_PASSWORD $KEYCHAIN_PATH

        # キーチェーンに証明書をインポートする
        security import $CERTIFICATE_PATH -P $P12_PASSWORD -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
        security list-keychain -d user -s $KEYCHAIN_PATH

        # プロビジョニングプロファイルを適用する
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

    # APIKeyを格納したファイルを生成する
    - name: Generate APIKeys file
      env:
        RESAS_API_KEY: ${{ secrets.RESAS_API_KEY }}
        GEO_DB_API_KEY: ${{ secrets.GEO_DB_API_KEY }}
        GCP_KEY: ${{ secrets.GCP_KEY }}
        LOCAL_SEARCH_API: ${{ secrets.LOCAL_SEARCH_API }}
      run: |
        pwd
        # APIKeysファイルを生成する
        echo enum APIKeys { > Dokoiko/APIKeys.swift
        echo static let RESAS_API_KEY = '"$RESAS_API_KEY"' >> Dokoiko/APIKeys.swift
        echo static let GEO_DB_API_KEY = '"$GEO_DB_API_KEY"' >> Dokoiko/APIKeys.swift
        echo static let GCP_KEY = '"$GCP_KEY"' >> Dokoiko/APIKeys.swift
        echo static let LOCAL_SEARCH_API = '"$LOCAL_SEARCH_API"' >> Dokoiko/APIKeys.swift
        echo } >> Dokoiko/APIKeys.swift

    # 確認用：使用可能なXcodeバージョンを出力
    - name: Show Xcode list
      run: ls /Applications | grep 'Xcode'

    # Gemsのキャッシュ
    - name: Cache Gems
      uses: actions/cache@v2
      with:
        path: vendor/bundle
        key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
        restore-keys: |
          ${{ runner.os }}-gems-

    # Gemsのインストール
    - name: Install Bundled Gems
      run: |
        bundle config path vendor/bundle
        bundle install --jobs 4 --retry 3

    # Mint で管理しているCLIツールをインストール
    - name: Install Mint
      run: brew install mint

    # Mint 管理のライブラリのキャッシュを復元
    - name: Cache Mint packages
      uses: actions/cache@v2
      with:
        path: mint
        key: ${{ runner.os }}-mint-${{ hashFiles('**/Mintfile') }}
        restore-keys: |
          ${{ runner.os }}-mint-

    # Carthageで管理しているライブラリのキャッシュ
    - name: Cache Carthage packages
      uses: actions/cache@v2
      with:
        path: Carthage
        key: ${{ runner.os }}-carthage-${{ hashFiles('**/Cartfile.resolved') }}
        restore-keys: |
          ${{ runner.os }}-carthage-

    # Carthageで管理しているライブラリのインストール
    - name: Install Carthage frameworks
      run: |
        mint run carthage bootstrap --platform iOS --use-xcframeworks --cache-builds
        echo '*** Resolved dependencies:'
        cat 'Cartfile.resolved'
      env:
        GITHUB_ACCESS_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # Git管理していない自動生成ファイルをここで生成しておく
    - name: Generate Auto file
      run: |
        xcrun --sdk macosx mint run swiftymocky generate
        xcrun --sdk macosx mint run swiftgen

    # プロジェクトファイルの生成
    - name: Generate Xcode project with XcodeGen
      run: mint run xcodegen xcodegen generate

    # ビルド
    - name: Xcode build
      run: set -o pipefail &&
        xcodebuild
        -sdk iphoneos
        -scheme Dokoiko
        -destination 'generic/platform=iOS'
        build
        | bundle exec xcpretty
        
    # 単体テスト
    - name: Xcode Unit Test
      run: set -o pipefail &&
        xcodebuild
        -sdk iphonesimulator
        -scheme Dokoiko
        -skip-testing DokoikoUITests
        -destination 'platform=iOS Simulator,name=iPhone 12 Pro Max'
        clean test
        | bundle exec xcpretty --report html

    - name: Clean up ApiKey file
      run: |
        rm Dokoiko/APIKeys.swift

    - name: Clean up keychain and provisioning profile
      if: ${{ always() }}
      run: |
        security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
        rm ~/Library/MobileDevice/Provisioning\ Profiles/dokoiko_develop.mobileprovision